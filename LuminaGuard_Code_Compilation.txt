Below is the improved codebase for "LuminaGuard" encapsulated as a single `.txt` content. It includes suggestions from the review, best practices, and additional customization features to create a more maintainable, robust, and future-proof solution. This code is arranged similarly to the previously provided code so that `decompile_code.py` can be used to restore the individual files. The improvements address initialization order, error handling, minimal MVVM structures, conditional onboarding, versioned config, updated System.Text.Json, better null checks, more user-friendly messages, and placeholders for future enhancements like dependency injection and plugin-based architectures.

The code is intended as a template or starting point. Some suggestions (e.g., full MVVM) are only partially integrated due to complexity. Further refactoring is encouraged.

Please note:
- We’ve introduced a `FirstRunCompleted` flag in `UserConfig` and conditionally launch OnboardingWizard or MainWindow.
- We’ve moved UI-dependent logic in MainWindow to Loaded event handlers.
- Added null checks and improved exception logging.
- Added placeholders for versioned config handling.
- Updated System.Text.Json to a hypothetical newer version (replace the version number as needed).
- Improved user messaging and introduced a setting to skip Night Light/f.lux warnings after first run.
- Introduced minimal separation for future MVVM: A `MainViewModel` class is included to show how properties could be data-bound. Actual data binding in XAML would need to be implemented for a full MVVM conversion.
- Added concurrency-safe logging with a lock.
- Profiles and config files now have a version field for potential migrations.

Once saved as `LuminaGuard_Code_Compilation.txt`, running `decompile_code.py` should reconstruct the files in a `LuminaGuard` directory.

================================================================================
File: LuminaGuard_Code_Compilation.txt
================================================================================

Below is the compiled code including all files. To decompile into individual files, run the provided `decompile_code.py` script.

================================================================================
File: LuminaGuard\App.xaml
================================================================================

﻿<Application x:Class="LuminaGuard.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="Views/OnboardingWizard.xaml">
    <Application.Resources>
        <!-- Global styles, theming, and resource dictionaries can go here -->
        <!-- Future: Include resource dictionaries for light/dark themes, high contrast, etc. -->
    </Application.Resources>
</Application>


================================================================================
File: LuminaGuard\App.xaml.cs
================================================================================

﻿using System.Windows;
using System.Threading;
using LuminaGuard.Models;
using System.IO;
using System.Text.Json;
using System;

namespace LuminaGuard
{
    public partial class App : Application
    {
        private static readonly string AppMutexName = "LuminaGuardAppMutex";
        private Mutex? appMutex;
        public static UserConfig CurrentConfig { get; set; } = new UserConfig();
        public static ProfilesManager ProfilesManager { get; set; } = new ProfilesManager();

        protected override void OnStartup(StartupEventArgs e)
        {
            bool createdNew;
            appMutex = new Mutex(true, AppMutexName, out createdNew);

            if (!createdNew)
            {
                MessageBox.Show("LuminaGuard is already running.", "LuminaGuard", MessageBoxButton.OK, MessageBoxImage.Information);
                Shutdown();
                return;
            }

            base.OnStartup(e);

            LoadConfiguration();

            // Conditional onboarding: If first run not completed, show onboarding. Otherwise, show MainWindow.
            if (CurrentConfig.FirstRunCompleted)
            {
                // Override StartupUri logic: we already have OnboardingWizard as default, but we will skip it:
                StartupUri = null;
                var mainWindow = new MainWindow();
                mainWindow.Show();
            }
            // Else: OnboardingWizard is shown as defined in App.xaml
        }

        protected override void OnExit(ExitEventArgs e)
        {
            SaveConfiguration();
            appMutex?.ReleaseMutex();
            base.OnExit(e);
        }

        private void LoadConfiguration()
        {
            string configPath = Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory, "config.json");
            if (File.Exists(configPath))
            {
                string json = File.ReadAllText(configPath);
                try
                {
                    var config = JsonSerializer.Deserialize<UserConfig>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (config != null)
                    {
                        // If versioning is introduced, handle migrations here:
                        // e.g., if (config.ConfigVersion < CurrentConfig.LatestSupportedVersion) { Migrate(config); }
                        CurrentConfig = config;
                    }
                }
                catch (Exception ex)
                {
                    Helpers.Logging.Log("Error loading config: " + ex.ToString());
                    // Fallback to defaults if broken
                    CurrentConfig = new UserConfig();
                }
            }
            else
            {
                CurrentConfig = new UserConfig();
            }

            ProfilesManager.LoadProfiles();
        }

        private void SaveConfiguration()
        {
            string configPath = Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory, "config.json");
            try
            {
                string json = JsonSerializer.Serialize(CurrentConfig, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(configPath, json);
                ProfilesManager.SaveProfiles();
            }
            catch (Exception ex)
            {
                Helpers.Logging.Log("Error saving config: " + ex.ToString());
            }
        }
    }
}


================================================================================
File: LuminaGuard\AssemblyInfo.cs
================================================================================

using System.Windows;

[assembly:ThemeInfo(    ResourceDictionaryLocation.None,    ResourceDictionaryLocation.SourceAssembly)]


================================================================================
File: LuminaGuard\LuminaGuard.csproj
================================================================================

﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
    <AssemblyName>LuminaGuard</AssemblyName>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <EnableDefaultPageItems>false</EnableDefaultPageItems>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Extended.Wpf.Toolkit" Version="4.6.1" />
    <PackageReference Include="Hardcodet.NotifyIcon.Wpf" Version="2.0.1" />
    <PackageReference Include="NHotkey.Wpf" Version="3.0.0" />
    <PackageReference Include="System.Management" Version="7.0.0" />
    <!-- Updated System.Text.Json to a safer, newer version. Replace with the actual stable version -->
    <PackageReference Include="System.Text.Json" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
    <Resource Include="Resources/app.ico" />
    <Compile Include="App.xaml.cs" />
    <Compile Include="AssemblyInfo.cs" />
    <Compile Include="MainWindow.xaml.cs" />
    <Compile Include="OverlayWindow.xaml.cs" />
    <Compile Include="Helpers\BrightnessController.cs" />
    <Compile Include="Helpers\ColorTemperatureConverter.cs" />
    <Compile Include="Helpers\FilterManager.cs" />
    <Compile Include="Helpers\ScheduleEntry.cs" />
    <Compile Include="Helpers\Scheduler.cs" />
    <Compile Include="Helpers\Logging.cs" />
    <Compile Include="Helpers\MLAdaptiveEngine.cs" />
    <Compile Include="Helpers\DayNightCurve.cs" />
    <Compile Include="Models\UserConfig.cs" />
    <Compile Include="Models\Profile.cs" />
    <Compile Include="Models\ProfilesManager.cs" />
    <Compile Include="Models\CircadianAdvisor.cs" />
    <Compile Include="Models\SmartLightingController.cs" />
    <Compile Include="Models\HueAdapter.cs" />
    <Compile Include="Models\LIFXAdapter.cs" />
    <Compile Include="Models\SensorManager.cs" />
    <Compile Include="Models\CloudSyncService.cs" />
    <Compile Include="Views\TipsAndTricksWindow.xaml.cs" />
    <Compile Include="Views\OnboardingWizard.xaml.cs" />
    <Compile Include="ViewModels\MainViewModel.cs" />
    <Compile Include="Plugins\IColorFilterPlugin.cs" />
    <Compile Include="Plugins\IIntegrationPlugin.cs" />
    <Compile Include="Helpers\ProcessMonitor.cs" />
  </ItemGroup>

  <ItemGroup>
    <Page Include="App.xaml" />
    <Page Include="MainWindow.xaml" />
    <Page Include="OverlayWindow.xaml" />
    <Page Include="Views\TipsAndTricksWindow.xaml" />
    <Page Include="Views\OnboardingWizard.xaml" />
  </ItemGroup>

</Project>


================================================================================
File: LuminaGuard\MainWindow.xaml
================================================================================

﻿<!-- MainWindow.xaml -->
<!-- 
  Improvements:
  - Consider MVVM binding in the future: Instead of handling everything in code-behind, bind these controls to MainViewModel properties.
  - Use data templates and separate user controls for different sections if expanding the UI.
-->

<Window x:Class="LuminaGuard.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="LuminaGuard" Height="800" Width="600">
    <Grid Margin="10">
        <DockPanel>
            <!-- Sidebar for Profile Switching and Quick Actions -->
            <StackPanel DockPanel.Dock="Left" Width="150" Margin="5">
                <TextBlock Text="Profiles" FontWeight="Bold" Margin="0,0,0,5"/>
                <ComboBox Name="ProfilesComboBox" SelectionChanged="ProfilesComboBox_SelectionChanged"
                          Margin="0,0,0,10"/>
                <Button Content="New Profile" Click="NewProfileButton_Click" Margin="0,0,0,5"/>
                <Button Content="Delete Profile" Click="DeleteProfileButton_Click" Margin="0,0,0,5"/>
                <Button Content="Open Tips" Click="OpenTipsButton_Click" Margin="0,0,0,5"/>
                <Button Content="Sync Cloud" Click="CloudSyncButton_Click" Margin="0,0,0,5"/>
            </StackPanel>

            <ScrollViewer HorizontalScrollBarVisibility="Auto">
            <StackPanel Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <TextBlock Text="LuminaGuard by Gradiorum" FontSize="16" FontWeight="Bold" HorizontalAlignment="Center" Margin="0,0,0,10" />

                <!-- Warnings and Override Options -->
                <StackPanel Margin="0,0,0,10">
                    <TextBlock Text="For optimal performance, please disable Windows Night Light and f.lux."
                               FontWeight="Bold" Foreground="Red" Margin="0,0,0,5"
                               Visibility="{Binding ShowNightLightWarning, Converter={x:Static System:BooleanToVisibilityConverter}}" />
                    <Button Content="Disable Night Light Instructions" Click="DisableNightLightButton_Click" Margin="0,0,0,5"
                            Visibility="{Binding ShowNightLightWarning, Converter={x:Static System:BooleanToVisibilityConverter}}"/>
                    <CheckBox Name="DontShowNightLightWarningCheckBox" Content="Don't show this warning again"
                              Checked="DontShowNightLightWarningCheckBox_Checked" Margin="0,0,0,5" />
                </StackPanel>

                <!-- Enable Filter Toggle -->
                <CheckBox Name="EnableFilterCheckBox" Content="Enable Filter" Click="EnableFilterCheckBox_Click" />

                <!-- Intensity Slider -->
                <TextBlock Text="Intensity (%)" Margin="0,10,0,0" />
                <Slider Name="IntensitySlider" Minimum="0" Maximum="90" Value="50" ValueChanged="IntensitySlider_ValueChanged" />

                <!-- Brightness Slider -->
                <TextBlock Text="Brightness (%)" Margin="0,10,0,0" />
                <Slider Name="BrightnessSlider" Minimum="10" Maximum="100" Value="100" ValueChanged="BrightnessSlider_ValueChanged" />

                <!-- Color Temperature Slider -->
                <TextBlock Text="Color Temperature (K)" Margin="0,10,0,0" />
                <Slider Name="TemperatureSlider" Minimum="1000" Maximum="6500" Value="1200" TickFrequency="100" IsSnapToTickEnabled="True" ValueChanged="TemperatureSlider_ValueChanged" />

                <!-- Custom Color Input -->
                <TextBlock Text="Custom Color (Hex)" Margin="0,10,0,0" />
                <StackPanel Orientation="Horizontal">
                    <TextBox Name="HexCodeTextBox" Width="100" TextChanged="HexCodeTextBox_TextChanged" />
                    <Button Name="ColorPickerButton" Content="Select Color" Click="ColorPickerButton_Click" Margin="10,0,0,0" />
                </StackPanel>

                <!-- Advanced Settings -->
                <Expander Header="Advanced Settings" Margin="0,10,0,0">
                    <StackPanel>
                        <!-- Scheduler Section -->
                        <CheckBox Name="EnableSchedulerCheckBox" Content="Enable Scheduler" />
                        <Button Name="AddScheduleButton" Content="Add Schedule" Click="AddScheduleButton_Click" Margin="0,5,0,0" />
                        <ListBox Name="ScheduleListBox" Height="100" />

                        <!-- Brightness Adjustment -->
                        <CheckBox Name="EnableBrightnessAdjustmentCheckBox" Content="Adjust Brightness Over Time" />

                        <!-- Custom Filters -->
                        <TextBlock Text="Custom Filters" Margin="0,10,0,0" />
                        <Button Name="ManageFiltersButton" Content="Manage Filters" Click="ManageFiltersButton_Click" />

                        <!-- Smart Home Integration -->
                        <TextBlock Text="Smart Lighting" Margin="0,10,0,0" />
                        <CheckBox Name="EnableSmartLightingCheckBox" Content="Sync With Smart Lights" Checked="EnableSmartLightingCheckBox_Checked" Unchecked="EnableSmartLightingCheckBox_Unchecked"/>
                        <ComboBox Name="SmartLightsComboBox" Margin="0,5,0,0"/>

                        <!-- Machine Learning Adaptation -->
                        <CheckBox Name="EnableMLCheckBox" Content="Enable Adaptive Learning" Checked="EnableMLCheckBox_Checked" Unchecked="EnableMLCheckBox_Unchecked"/>

                        <!-- Accessibility Modes -->
                        <TextBlock Text="Accessibility Modes" Margin="0,10,0,0" />
                        <ComboBox Name="AccessibilityComboBox" Margin="0,5,0,0">
                            <ComboBoxItem Content="None"/>
                            <ComboBoxItem Content="High Contrast"/>
                            <ComboBoxItem Content="Darkroom"/>
                            <ComboBoxItem Content="Deuteranope Simulation"/>
                            <ComboBoxItem Content="Protanope Simulation"/>
                            <ComboBoxItem Content="Tritanope Simulation"/>
                        </ComboBox>
                    </StackPanel>
                </Expander>

                <!-- Pause Feature -->
                <Expander Header="Pause LuminaGuard" Margin="0,10,0,0">
                    <StackPanel>
                        <TextBlock Text="You can temporarily pause LuminaGuard:" Margin="0,0,0,10"/>
                        <RadioButton Name="PauseUntilAppsCloseRadio" Content="Pause while certain apps are running" GroupName="PauseOptions" Margin="0,0,0,5"/>
                        <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                            <TextBlock Text="Apps to Monitor (comma-separated):" Margin="0,0,10,0"/>
                            <TextBox Name="AppsToMonitorTextBox" Width="200" />
                        </StackPanel>
                        <RadioButton Name="PauseForDurationRadio" Content="Pause for (hours):" GroupName="PauseOptions" Margin="0,0,0,5"/>
                        <StackPanel Orientation="Horizontal">
                            <TextBox Name="PauseDurationTextBox" Width="50" />
                            <TextBlock Text="hours"/>
                        </StackPanel>
                        <RadioButton Name="PauseUntilManuallyEnabledRadio" Content="Pause until I turn it back on" GroupName="PauseOptions" Margin="0,5,0,5"/>
                        <Button Content="Apply Pause" Click="ApplyPauseButton_Click" Margin="0,5,0,0"/>
                        <Button Content="Resume Now" Click="ResumeNowButton_Click" Margin="0,5,0,0"/>
                    </StackPanel>
                </Expander>

                <!-- Timeline Visualization -->
                <TextBlock Text="Daily Curve" Margin="0,20,0,5" FontWeight="Bold"/>
                <Border BorderBrush="Gray" BorderThickness="1" Height="100">
                    <TextBlock Text="Timeline visualization placeholder" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Border>

                <!-- System Tray Icon -->
                <tb:TaskbarIcon x:Name="NotifyIcon" IconSource="pack://application:,,,/Resources/app.ico" Visibility="Collapsed">
                    <tb:TaskbarIcon.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Toggle Filter" Click="ToggleFilter_Click" />
                            <MenuItem Header="Open Settings" Click="OpenSettings_Click" />
                            <MenuItem Header="Exit" Click="Exit_Click" />
                        </ContextMenu>
                    </tb:TaskbarIcon.ContextMenu>
                </tb:TaskbarIcon>
            </StackPanel>
            </ScrollViewer>
        </DockPanel>
    </Grid>
</Window>


================================================================================
File: LuminaGuard\MainWindow.xaml.cs
================================================================================

﻿using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Media;
using System.Windows.Threading;
using Hardcodet.Wpf.TaskbarNotification;
using NHotkey;
using NHotkey.Wpf;
using WF = System.Windows.Forms;
using LuminaGuard.Helpers;
using System.Windows.Controls;
using LuminaGuard.Models;
using System.Linq;
using System.Diagnostics;

namespace LuminaGuard
{
    public partial class MainWindow : Window
    {
        private OverlayWindow? overlayWindow;
        private DispatcherTimer schedulerTimer = new DispatcherTimer();
        private Scheduler scheduler;
        private BrightnessController? brightnessController;
        private FilterManager filterManager;
        private ObservableCollection<ScheduleEntry> schedules;
        private bool isHotkeyRegistered = false;
        private SmartLightingController? lightingController;
        private DispatcherTimer pauseCheckTimer = new DispatcherTimer();
        private DateTime pauseEndTime = DateTime.MinValue;
        private bool isPaused = false;
        private ProcessMonitor processMonitor;
        private bool uiLoaded = false; // Ensure UI loaded before applying settings

        public MainWindow()
        {
            InitializeComponent();
            schedules = new ObservableCollection<ScheduleEntry>();
            // Defer UI-dependent initialization until Loaded event
            this.Loaded += MainWindow_Loaded;
            this.Closing += MainWindow_Closing;
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            // Initialize components that depend on UI
            overlayWindow = new OverlayWindow();
            scheduler = new Scheduler();
            brightnessController = new BrightnessController();
            filterManager = new FilterManager();
            processMonitor = new ProcessMonitor();

            ScheduleListBox.ItemsSource = schedules;

            ProfilesComboBox.ItemsSource = App.ProfilesManager.GetProfileNames();
            if (!string.IsNullOrEmpty(App.CurrentConfig.CurrentProfileName))
                ProfilesComboBox.SelectedItem = App.CurrentConfig.CurrentProfileName;
            else
                ProfilesComboBox.SelectedItem = App.ProfilesManager.GetProfileNames().FirstOrDefault();

            InitializeScheduler();
            RegisterHotkeys();
            InitializeSmartLightingOptions();
            ApplyConfigToUI();

            pauseCheckTimer.Interval = TimeSpan.FromSeconds(5);
            pauseCheckTimer.Tick += PauseCheckTimer_Tick;
            pauseCheckTimer.Start();

            EnableSchedulerCheckBox.Checked += EnableSchedulerCheckBox_Checked;
            EnableSchedulerCheckBox.Unchecked += EnableSchedulerCheckBox_Unchecked;

            if (!App.CurrentConfig.HideNightLightWarning)
            {
                MessageBox.Show("For optimal performance, please disable Windows Night Light and close f.lux if running.",
                            "LuminaGuard", MessageBoxButton.OK, MessageBoxImage.Information);
            }

            uiLoaded = true;
            if (App.CurrentConfig.FilterEnabled && !isPaused) ApplyOverlaySettings();
        }

        private void PauseCheckTimer_Tick(object? sender, EventArgs e)
        {
            if (isPaused)
            {
                if (PauseForDurationRadio.IsChecked == true && DateTime.Now > pauseEndTime && pauseEndTime != DateTime.MinValue)
                {
                    ResumeNow();
                }
                else if (PauseUntilAppsCloseRadio.IsChecked == true)
                {
                    var apps = AppsToMonitorTextBox.Text.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(a => a.Trim()).ToList();
                    if (apps.Count > 0)
                    {
                        bool anyRunning = processMonitor.AnyProcessRunning(apps);
                        if (!anyRunning)
                        {
                            ResumeNow();
                        }
                    }
                }
            }
            else
            {
                if (PauseUntilAppsCloseRadio.IsChecked == true)
                {
                    var apps = AppsToMonitorTextBox.Text.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(a => a.Trim()).ToList();
                    if (apps.Count > 0)
                    {
                        bool anyRunning = processMonitor.AnyProcessRunning(apps);
                        if (anyRunning)
                        {
                            PauseNow();
                        }
                    }
                }
            }
        }

        private void PauseNow()
        {
            isPaused = true;
            overlayWindow?.HideAllOverlays();
        }

        private void ResumeNow()
        {
            isPaused = false;
            ApplyOverlaySettings(); 
        }

        private void ApplyConfigToUI()
        {
            // Check for null references since UI elements should be ready by now
            if (App.CurrentConfig == null) return;

            IntensitySlider.Value = App.CurrentConfig.Intensity;
            BrightnessSlider.Value = App.CurrentConfig.Brightness;
            TemperatureSlider.Value = App.CurrentConfig.ColorTemperature;
            EnableFilterCheckBox.IsChecked = App.CurrentConfig.FilterEnabled;
            HexCodeTextBox.Text = App.CurrentConfig.CustomColorHex;
            EnableSchedulerCheckBox.IsChecked = App.CurrentConfig.SchedulerEnabled;
            EnableBrightnessAdjustmentCheckBox.IsChecked = App.CurrentConfig.BrightnessOverTimeEnabled;
            EnableSmartLightingCheckBox.IsChecked = App.CurrentConfig.SmartLightingEnabled;
            EnableMLCheckBox.IsChecked = App.CurrentConfig.MLAdaptationEnabled;
            DontShowNightLightWarningCheckBox.IsChecked = App.CurrentConfig.HideNightLightWarning;

            schedules.Clear();
            if (App.CurrentConfig.Schedules != null)
            {
                foreach (var sch in App.CurrentConfig.Schedules)
                {
                    schedules.Add(sch);
                }
                scheduler.ScheduleEntries = schedules;
            }

            if (!string.IsNullOrWhiteSpace(App.CurrentConfig.AccessibilityMode))
            {
                AccessibilityComboBox.SelectedItem = AccessibilityComboBox.Items.Cast<ComboBoxItem>()
                    .FirstOrDefault(i => i.Content?.ToString() == App.CurrentConfig.AccessibilityMode);
            }
        }

        private void InitializeSmartLightingOptions()
        {
            SmartLightsComboBox.Items.Clear();
            // Populate with mock options, in a real scenario we could dynamically load plugins
            SmartLightsComboBox.Items.Add("Hue Bridge");
            SmartLightsComboBox.Items.Add("LIFX");
            SmartLightsComboBox.Items.Add("HomeKit");
        }

        private void EnableFilterCheckBox_Click(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.FilterEnabled = (EnableFilterCheckBox.IsChecked == true);
            if (App.CurrentConfig.FilterEnabled && !isPaused)
            {
                ApplyOverlaySettings();
                overlayWindow?.ShowAllOverlays();
            }
            else
            {
                overlayWindow?.HideAllOverlays();
            }
        }

        private void IntensitySlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.Intensity = IntensitySlider.Value;
            if (!isPaused) ApplyOverlaySettings();
        }

        private void BrightnessSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (!uiLoaded) return;
            if (brightnessController == null) return;
            byte brightness = (byte)BrightnessSlider.Value;
            App.CurrentConfig.Brightness = brightness;
            try
            {
                brightnessController.SetBrightness(brightness);
            }
            catch (Exception ex)
            {
                Logging.Log("Error adjusting brightness: " + ex.ToString());
            }
        }

        private void TemperatureSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.ColorTemperature = TemperatureSlider.Value;
            HexCodeTextBox.Text = ""; 
            if (!isPaused) ApplyOverlaySettings();
        }

        private void HexCodeTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.CustomColorHex = HexCodeTextBox.Text;
            if (!isPaused) ApplyOverlaySettings();
        }

        private void ColorPickerButton_Click(object sender, RoutedEventArgs e)
        {
            var colorDialog = new WF.ColorDialog();
            if (colorDialog.ShowDialog() == WF.DialogResult.OK)
            {
                var color = colorDialog.Color;
                HexCodeTextBox.Text = $"#{color.R:X2}{color.G:X2}{color.B:X2}";
            }
        }

        private bool IsValidHex(string hex)
        {
            if (string.IsNullOrWhiteSpace(hex))
                return false;
            hex = hex.Trim();
            if (hex.StartsWith("#"))
                hex = hex.Substring(1);
            return hex.Length == 6 || hex.Length == 8;
        }

        private void ApplyOverlaySettings()
        {
            if (!uiLoaded || overlayWindow == null || isPaused) return;
            if (!App.CurrentConfig.FilterEnabled) return;

            Color color;

            if (IsValidHex(HexCodeTextBox.Text))
            {
                try
                {
                    color = (Color)ColorConverter.ConvertFromString(HexCodeTextBox.Text);
                }
                catch
                {
                    MessageBox.Show("Invalid hex code entered.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
            }
            else
            {
                double kelvin = TemperatureSlider.Value;
                color = ColorTemperatureConverter.ColorTemperatureToRGB(kelvin);
            }

            double intensity = IntensitySlider.Value / 100.0;
            byte alpha = (byte)(intensity * 255);

            if (alpha >= 230)
            {
                alpha = 230;
            }

            color = Color.FromArgb(alpha, color.R, color.G, color.B);

            filterManager.SetAccessibilityMode(App.CurrentConfig.AccessibilityMode);
            color = filterManager.ApplyFilters(color);

            overlayWindow.SetOverlayColor(color);

            if (App.CurrentConfig.SmartLightingEnabled && lightingController != null)
            {
                try
                {
                    lightingController.SetColorTemperature(TemperatureSlider.Value);
                }
                catch (Exception ex)
                {
                    Logging.Log("Error setting smart lighting temperature: " + ex.ToString());
                }
            }
        }

        private void InitializeScheduler()
        {
            schedulerTimer.Interval = TimeSpan.FromMinutes(1);
            schedulerTimer.Tick += SchedulerTimer_Tick;
            if (App.CurrentConfig.SchedulerEnabled)
                schedulerTimer.Start();
        }

        private void SchedulerTimer_Tick(object? sender, EventArgs e)
        {
            if (EnableSchedulerCheckBox.IsChecked == true)
            {
                UpdateIntensityBasedOnSchedule();
            }

            if (App.CurrentConfig.MLAdaptationEnabled)
            {
                MLAdaptiveEngine.AdaptSettings(App.CurrentConfig);
                if (!isPaused) ApplyOverlaySettings();
            }
        }

        private void UpdateIntensityBasedOnSchedule()
        {
            DateTime now = DateTime.Now;
            double progress = scheduler.CalculateProgress(now.TimeOfDay);

            double scheduledIntensity = progress * IntensitySlider.Maximum;
            IntensitySlider.Value = scheduledIntensity;

            if (EnableBrightnessAdjustmentCheckBox.IsChecked == true && brightnessController != null)
            {
                byte brightness = (byte)(BrightnessSlider.Maximum - scheduledIntensity);
                brightnessController.SetBrightness(brightness);
                App.CurrentConfig.Brightness = brightness;
            }
        }

        private void EnableSchedulerCheckBox_Checked(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.SchedulerEnabled = true;
            schedulerTimer.Start();
        }

        private void EnableSchedulerCheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.SchedulerEnabled = false;
            schedulerTimer.Stop();
        }

        private void RegisterHotkeys()
        {
            if (isHotkeyRegistered)
                return;

            try
            {
                HotkeyManager.Current.AddOrReplace("ToggleFilter", System.Windows.Input.Key.F12, System.Windows.Input.ModifierKeys.None, OnToggleFilterHotkey);
                isHotkeyRegistered = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to register hotkey: " + ex.Message);
            }
        }

        private void OnToggleFilterHotkey(object? sender, HotkeyEventArgs e)
        {
            if (isPaused)
            {
                e.Handled = true;
                return;
            }

            if (overlayWindow != null)
            {
                if (overlayWindow.AnyOverlayVisible())
                    overlayWindow.HideAllOverlays();
                else
                {
                    ApplyOverlaySettings();
                    overlayWindow.ShowAllOverlays();
                }
            }

            e.Handled = true;
        }

        private void MainWindow_Closing(object? sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
            if (NotifyIcon != null)
                NotifyIcon.Visibility = Visibility.Visible;
        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            NotifyIcon.Dispose();
            Application.Current.Shutdown();
        }

        private void OpenSettings_Click(object sender, RoutedEventArgs e)
        {
            this.Show();
            this.WindowState = WindowState.Normal;
        }

        private void ToggleFilter_Click(object sender, RoutedEventArgs e)
        {
            if (isPaused || overlayWindow == null) return;

            if (overlayWindow.AnyOverlayVisible())
                overlayWindow.HideAllOverlays();
            else
            {
                ApplyOverlaySettings();
                overlayWindow.ShowAllOverlays();
            }
        }

        private void ManageFiltersButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Filter management feature placeholder. Future versions could allow loading filter plugins or editing custom curves.",
                "Info", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void AddScheduleButton_Click(object sender, RoutedEventArgs e)
        {
            var newSchedule = new ScheduleEntry
            {
                StartTime = TimeSpan.FromHours(22),
                EndTime = TimeSpan.FromHours(6),
                IntensityCurve = "Exponential"
            };
            schedules.Add(newSchedule);
            scheduler.ScheduleEntries = schedules;
            App.CurrentConfig.Schedules = schedules.ToList();
        }

        private void ProfilesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var selectedName = ProfilesComboBox.SelectedItem?.ToString();
            if (!string.IsNullOrEmpty(selectedName))
            {
                App.ProfilesManager.SwitchProfile(selectedName);
                ApplyConfigToUI();
                if (!isPaused) ApplyOverlaySettings();
            }
        }

        private void NewProfileButton_Click(object sender, RoutedEventArgs e)
        {
            string newProfileName = "NewProfile" + DateTime.Now.Ticks;
            App.ProfilesManager.CreateProfile(newProfileName);
            ProfilesComboBox.ItemsSource = App.ProfilesManager.GetProfileNames();
            ProfilesComboBox.SelectedItem = newProfileName;
        }

        private void DeleteProfileButton_Click(object sender, RoutedEventArgs e)
        {
            var profName = ProfilesComboBox.SelectedItem?.ToString();
            if (!string.IsNullOrEmpty(profName))
            {
                App.ProfilesManager.DeleteProfile(profName);
                ProfilesComboBox.ItemsSource = App.ProfilesManager.GetProfileNames();
                ProfilesComboBox.SelectedItem = App.ProfilesManager.GetProfileNames().FirstOrDefault();
            }
        }

        private void OpenTipsButton_Click(object sender, RoutedEventArgs e)
        {
            var tipsWindow = new Views.TipsAndTricksWindow();
            tipsWindow.Show();
        }

        private void CloudSyncButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                CloudSyncService.Sync(App.CurrentConfig);
                MessageBox.Show("Settings synchronized to cloud.", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                Logging.Log("Cloud sync error: " + ex.ToString());
                MessageBox.Show("Failed to sync settings to cloud.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EnableSmartLightingCheckBox_Checked(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.SmartLightingEnabled = true;
            if (SmartLightsComboBox.SelectedItem != null)
            {
                var selectedLight = SmartLightsComboBox.SelectedItem.ToString();
                if (selectedLight != null)
                {
                    if (selectedLight.Contains("Hue"))
                        lightingController = new HueAdapter();
                    else if (selectedLight.Contains("LIFX"))
                        lightingController = new LIFXAdapter();
                    else
                        lightingController = new HueAdapter(); // fallback

                    try
                    {
                        lightingController.Initialize();
                        lightingController.SetColorTemperature(TemperatureSlider.Value);
                    }
                    catch (Exception ex)
                    {
                        Logging.Log("Smart lighting init error: " + ex.ToString());
                    }
                }
            }
        }

        private void EnableSmartLightingCheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.SmartLightingEnabled = false;
            lightingController = null;
        }

        private void EnableMLCheckBox_Checked(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.MLAdaptationEnabled = true;
        }

        private void EnableMLCheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.MLAdaptationEnabled = false;
        }

        private void ApplyPauseButton_Click(object sender, RoutedEventArgs e)
        {
            if (PauseForDurationRadio.IsChecked == true)
            {
                if (double.TryParse(PauseDurationTextBox.Text, out double hours))
                {
                    pauseEndTime = DateTime.Now.AddHours(hours);
                    PauseNow();
                }
                else
                {
                    MessageBox.Show("Invalid duration input.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else if (PauseUntilManuallyEnabledRadio.IsChecked == true)
            {
                pauseEndTime = DateTime.MinValue;
                PauseNow();
            }
            else if (PauseUntilAppsCloseRadio.IsChecked == true)
            {
                var apps = AppsToMonitorTextBox.Text.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                            .Select(a => a.Trim()).ToList();
                bool anyRunning = processMonitor.AnyProcessRunning(apps);
                if (anyRunning)
                {
                    PauseNow();
                }
                else
                {
                    MessageBox.Show("None of the specified apps are currently running. LuminaGuard will pause automatically when they start.",
                        "Info", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            else
            {
                MessageBox.Show("Select a pause method first.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void ResumeNowButton_Click(object sender, RoutedEventArgs e)
        {
            ResumeNow();
        }

        private void DisableNightLightButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("To disable Night Light:\n1. Open Windows Settings > System > Display.\n2. Toggle off 'Night light'.",
                            "Disable Night Light Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void DontShowNightLightWarningCheckBox_Checked(object sender, RoutedEventArgs e)
        {
            if (!uiLoaded) return;
            App.CurrentConfig.HideNightLightWarning = (DontShowNightLightWarningCheckBox.IsChecked == true);
        }
    }
}


================================================================================
File: LuminaGuard\OverlayWindow.xaml
================================================================================

<!-- OverlayWindow.xaml -->
<Window x:Class="LuminaGuard.OverlayWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        WindowStyle="None"
        AllowsTransparency="True"
        Background="Transparent"
        Topmost="True"
        ShowInTaskbar="False"
        ResizeMode="NoResize"
        WindowState="Maximized"
        Visibility="Collapsed">
    <Grid Name="OverlayGrid" Background="Transparent" />
</Window>


================================================================================
File: LuminaGuard\OverlayWindow.xaml.cs
================================================================================

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Controls;
using System.Windows.Forms; // For Screen
using System.Windows.Interop;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace LuminaGuard
{
    public partial class OverlayWindow : Window
    {
        private List<OverlayWindowInstance> overlayInstances = new List<OverlayWindowInstance>();

        public OverlayWindow()
        {
            InitializeComponent();
            Loaded += OverlayWindow_Loaded;
        }

        private void OverlayWindow_Loaded(object sender, RoutedEventArgs e)
        {
            AdjustToAllScreens();
        }

        public void SetOverlayColor(Color color)
        {
            foreach (var overlay in overlayInstances)
            {
                overlay.SetOverlayColor(color);
            }
        }

        private void AdjustToAllScreens()
        {
            foreach (var screen in Screen.AllScreens)
            {
                var overlay = new OverlayWindowInstance(screen);
                overlay.Hide();
                overlayInstances.Add(overlay);
            }
            this.Hide(); // Hide the initial overlay
        }

        public void ShowAllOverlays()
        {
            foreach (var overlay in overlayInstances)
            {
                overlay.Show();
            }
        }

        public void HideAllOverlays()
        {
            foreach (var overlay in overlayInstances)
            {
                overlay.Hide();
            }
        }

        public bool AnyOverlayVisible()
        {
            foreach (var o in overlayInstances)
            {
                if (o.IsVisible) return true;
            }
            return false;
        }
    }

    public class OverlayWindowInstance : Window
    {
        private Grid OverlayGrid;

        public OverlayWindowInstance(Screen screen)
        {
            WindowStyle = WindowStyle.None;
            AllowsTransparency = true;
            Background = Brushes.Transparent;
            Topmost = true;
            ShowInTaskbar = false;
            ResizeMode = ResizeMode.NoResize;

            Left = screen.Bounds.Left / GetDpiFactor();
            Top = screen.Bounds.Top / GetDpiFactor();
            Width = screen.Bounds.Width / GetDpiFactor();
            Height = screen.Bounds.Height / GetDpiFactor();

            OverlayGrid = new Grid { Background = Brushes.Transparent };
            Content = OverlayGrid;

            Loaded += OverlayWindowInstance_Loaded;
        }

        public void SetOverlayColor(Color color)
        {
            OverlayGrid.Background = new SolidColorBrush(color);
        }

        private void OverlayWindowInstance_Loaded(object sender, RoutedEventArgs e)
        {
            MakeWindowTransparent();
        }

        private void MakeWindowTransparent()
        {
            var hwnd = new WindowInteropHelper(this).Handle;
            int extendedStyle = GetWindowLong(hwnd, GWL_EXSTYLE);
            SetWindowLong(hwnd, GWL_EXSTYLE, extendedStyle | WS_EX_TRANSPARENT | WS_EX_LAYERED);
        }

        private double GetDpiFactor()
        {
            var source = PresentationSource.FromVisual(this);
            return source?.CompositionTarget?.TransformToDevice.M11 ?? 1.0;
        }

        private const int GWL_EXSTYLE = -20;
        private const int WS_EX_TRANSPARENT = 0x00000020;
        private const int WS_EX_LAYERED = 0x00080000;

        [DllImport("user32.dll")]
        private static extern int GetWindowLong(IntPtr hwnd, int index);

        [DllImport("user32.dll")]
        private static extern int SetWindowLong(IntPtr hwnd, int index, int newStyle);
    }
}


================================================================================
File: LuminaGuard\Helpers\BrightnessController.cs
================================================================================

using System;
using System.Management;

namespace LuminaGuard.Helpers
{
    public class BrightnessController
    {
        public void SetBrightness(byte targetBrightness)
        {
            try
            {
                ManagementScope scope = new ManagementScope("root\\WMI");
                SelectQuery query = new SelectQuery("WmiMonitorBrightnessMethods");
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope, query))
                {
                    ManagementObjectCollection objectCollection = searcher.Get();
                    foreach (ManagementObject mObj in objectCollection)
                    {
                        mObj.InvokeMethod("WmiSetBrightness", new object[] { uint.MaxValue, targetBrightness });
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Logging.Log("Error setting brightness: " + ex.Message);
            }
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\ColorTemperatureConverter.cs
================================================================================

using System;
using System.Windows.Media;

namespace LuminaGuard.Helpers
{
    public static class ColorTemperatureConverter
    {
        public static Color ColorTemperatureToRGB(double kelvin)
        {
            kelvin = kelvin / 100;

            double red, green, blue;

            if (kelvin <= 66)
            {
                red = 255;
            }
            else
            {
                red = kelvin - 60;
                red = 329.698727446 * Math.Pow(red, -0.1332047592);
                red = Math.Clamp(red, 0, 255);
            }

            if (kelvin <= 66)
            {
                green = kelvin;
                green = 99.4708025861 * Math.Log(green) - 161.1195681661;
            }
            else
            {
                green = kelvin - 60;
                green = 288.1221695283 * Math.Pow(green, -0.0755148492);
            }
            green = Math.Clamp(green, 0, 255);

            if (kelvin >= 66)
            {
                blue = 255;
            }
            else if (kelvin <= 19)
            {
                blue = 0;
            }
            else
            {
                blue = kelvin - 10;
                blue = 138.5177312231 * Math.Log(blue) - 305.0447927307;
                blue = Math.Clamp(blue, 0, 255);
            }

            return Color.FromRgb((byte)red, (byte)green, (byte)blue);
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\DayNightCurve.cs
================================================================================

using System;

namespace LuminaGuard.Helpers
{
    public class DayNightCurve
    {
        // Placeholder for more complex gradient curves.
        // Future: Add polynomial or spline-based curves for smoother transitions.
        public double Evaluate(double timeOfDayNormalized)
        {
            // Just a linear placeholder
            return timeOfDayNormalized;
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\FilterManager.cs
================================================================================

using System;
using System.Collections.Generic;
using System.Windows.Media;

namespace LuminaGuard.Helpers
{
    public class FilterManager
    {
        private List<Func<Color, Color>> filters;
        private string accessibilityMode = "None";

        public FilterManager()
        {
            filters = new List<Func<Color, Color>>();
        }

        public void SetAccessibilityMode(string mode)
        {
            accessibilityMode = mode ?? "None";
        }

        public Color ApplyFilters(Color color)
        {
            filters.Clear();

            switch (accessibilityMode)
            {
                case "High Contrast":
                    filters.Add(HighContrastFilter);
                    break;
                case "Darkroom":
                    filters.Add(DarkroomFilter);
                    break;
                case "Deuteranope Simulation":
                    filters.Add(DeuteranopeFilter);
                    break;
                case "Protanope Simulation":
                    filters.Add(ProtanopeFilter);
                    break;
                case "Tritanope Simulation":
                    filters.Add(TritanopeFilter);
                    break;
                case "None":
                default:
                    break;
            }

            foreach (var filter in filters)
            {
                color = filter(color);
            }
            return color;
        }

        public static Color HighContrastFilter(Color color)
        {
            byte gray = (byte)((color.R + color.G + color.B) / 3);
            return gray < 128 ? Colors.Black : Colors.White;
        }

        public static Color DarkroomFilter(Color color)
        {
            return Color.FromArgb(color.A, (byte)(255 - color.R), 0, 0);
        }

        // Naive color blindness simulations
        public static Color DeuteranopeFilter(Color color)
        {
            var avg = (color.R + color.B) / 2;
            return Color.FromArgb(color.A, (byte)avg, (byte)avg, color.B);
        }

        public static Color ProtanopeFilter(Color color)
        {
            var avg = (color.G + color.B) / 2;
            return Color.FromArgb(color.A, (byte)avg, color.G, (byte)avg);
        }

        public static Color TritanopeFilter(Color color)
        {
            var avg = (color.R + color.G) / 2;
            return Color.FromArgb(color.A, color.R, (byte)avg, (byte)avg);
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\Logging.cs
================================================================================

using System;
using System.IO;
using System.Threading;

namespace LuminaGuard.Helpers
{
    public static class Logging
    {
        private static readonly object lockObj = new object();

        public static void Log(string message)
        {
            try
            {
                lock (lockObj)
                {
                    string logPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "log.txt");
                    File.AppendAllText(logPath, DateTime.Now + ": " + message + Environment.NewLine);
                }
            }
            catch { }
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\MLAdaptiveEngine.cs
================================================================================

using LuminaGuard.Models;
using System;

namespace LuminaGuard.Helpers
{
    public static class MLAdaptiveEngine
    {
        public static void AdaptSettings(UserConfig config)
        {
            // Placeholder logic. Future versions could incorporate real ML (e.g., user feedback loops, data from sensors).
            TimeSpan now = DateTime.Now.TimeOfDay;
            if (now.Hours >= 22 || now.Hours < 6)
            {
                config.ColorTemperature = Math.Max(1000, config.ColorTemperature - 10);
            }
            else
            {
                config.ColorTemperature = Math.Min(6500, config.ColorTemperature + 10);
            }
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\ProcessMonitor.cs
================================================================================

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.Generic;

namespace LuminaGuard.Helpers
{
    public class ProcessMonitor
    {
        public bool AnyProcessRunning(IEnumerable<string> processNames)
        {
            var lowerNames = processNames.Select(n => n.ToLower()).ToList();
            var runningProcesses = Process.GetProcesses();
            foreach (var p in runningProcesses)
            {
                try
                {
                    if (lowerNames.Contains(p.ProcessName.ToLower()))
                    {
                        return true;
                    }
                }
                catch { }
            }
            return false;
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\ScheduleEntry.cs
================================================================================

using System;

namespace LuminaGuard.Helpers
{
    public class ScheduleEntry
    {
        public TimeSpan StartTime { get; set; }
        public TimeSpan EndTime { get; set; }
        public string IntensityCurve { get; set; } = "Linear";

        public override string ToString()
        {
            return $"{StartTime:hh\\:mm} - {EndTime:hh\\:mm} ({IntensityCurve})";
        }
    }
}


================================================================================
File: LuminaGuard\Helpers\Scheduler.cs
================================================================================

using System;
using System.Collections.Generic;

namespace LuminaGuard.Helpers
{
    public class Scheduler
    {
        public IList<ScheduleEntry> ScheduleEntries { get; set; }
        public double RateOfChange { get; set; } = 1.0;

        public Scheduler()
        {
            ScheduleEntries = new List<ScheduleEntry>();
        }

        public double CalculateProgress(TimeSpan now)
        {
            foreach (var entry in ScheduleEntries)
            {
                TimeSpan start = entry.StartTime;
                TimeSpan end = entry.EndTime;

                if (end <= start)
                {
                    // Wraps past midnight
                    if (now >= start || now <= end)
                    {
                        return CalculateProgressForEntry(now, start, end, entry.IntensityCurve) * RateOfChange;
                    }
                }
                else
                {
                    if (now >= start && now <= end)
                    {
                        return CalculateProgressForEntry(now, start, end, entry.IntensityCurve) * RateOfChange;
                    }
                }
            }

            return 0; 
        }

        private double CalculateProgressForEntry(TimeSpan now, TimeSpan start, TimeSpan end, string curveType)
        {
            double totalMinutes = (end <= start)
                ? (end + TimeSpan.FromDays(1) - start).TotalMinutes
                : (end - start).TotalMinutes;
            double elapsedMinutes = (end <= start && now < start)
                ? (now + TimeSpan.FromDays(1) - start).TotalMinutes
                : (now - start).TotalMinutes;

            if (totalMinutes <= 0)
                return 1;

            double progress = elapsedMinutes / totalMinutes;
            progress = Math.Max(0, Math.Min(1, progress));

            switch (curveType)
            {
                case "Exponential":
                    progress = Math.Pow(progress, 2);
                    break;
                case "Linear":
                default:
                    break;
            }

            return progress;
        }
    }
}


================================================================================
File: LuminaGuard\Models\CircadianAdvisor.cs
================================================================================

using System;

namespace LuminaGuard.Models
{
    public class CircadianAdvisor
    {
        public TimeSpan DesiredBedtime { get; set; }
        public TimeSpan DesiredWakeTime { get; set; }

        public CircadianAdvisor(TimeSpan bedtime, TimeSpan wakeTime)
        {
            DesiredBedtime = bedtime;
            DesiredWakeTime = wakeTime;
        }

        public double GetRecommendedColorTemperature(TimeSpan now)
        {
            double hoursToBed = (DesiredBedtime - now).TotalHours;
            if (hoursToBed < 0) hoursToBed += 24;
            if (hoursToBed < 2) return 2000; 
            if (hoursToBed < 4) return 3000;
            return 5000;
        }
    }
}


================================================================================
File: LuminaGuard\Models\CloudSyncService.cs
================================================================================

using System;

namespace LuminaGuard.Models
{
    public static class CloudSyncService
    {
        public static void Sync(UserConfig config)
        {
            // Placeholder: Upload config to cloud
            // Future: secure auth, encryption, conflict resolution
        }
    }
}


================================================================================
File: LuminaGuard\Models\HueAdapter.cs
================================================================================

using System;

namespace LuminaGuard.Models
{
    public class HueAdapter : SmartLightingController
    {
        public void Initialize()
        {
            // Connect to Hue Bridge
            // Future: Implement proper Hue discovery, authentication
        }

        public void SetColorTemperature(double kelvin)
        {
            Console.WriteLine("Hue: Setting color temperature to " + kelvin);
        }
    }
}


================================================================================
File: LuminaGuard\Models\LIFXAdapter.cs
================================================================================

using System;

namespace LuminaGuard.Models
{
    public class LIFXAdapter : SmartLightingController
    {
        public void Initialize()
        {
            // Connect to LIFX bulbs
            // Future: Implement LIFX LAN protocol or cloud API
        }

        public void SetColorTemperature(double kelvin)
        {
            Console.WriteLine("LIFX: Setting color temperature to " + kelvin);
        }
    }
}


================================================================================
File: LuminaGuard\Models\Profile.cs
================================================================================

namespace LuminaGuard.Models
{
    public class Profile
    {
        // Placeholder: If needed, store profile-specific info here.
        // Future: Add user-defined curves, custom filters, personal preferences.
    }
}


================================================================================
File: LuminaGuard\Models\ProfilesManager.cs
================================================================================

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace LuminaGuard.Models
{
    public class ProfilesManager
    {
        private Dictionary<string, UserConfig> profiles = new Dictionary<string, UserConfig>();

        private string ProfilesPath => Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "profiles.json");

        public void LoadProfiles()
        {
            if (File.Exists(ProfilesPath))
            {
                var json = File.ReadAllText(ProfilesPath);
                try
                {
                    var dict = JsonSerializer.Deserialize<Dictionary<string, UserConfig>>(json);
                    if (dict != null) profiles = dict;
                }
                catch (Exception ex)
                {
                    Helpers.Logging.Log("Error loading profiles: " + ex.ToString());
                }
            }

            if (!profiles.ContainsKey("Default"))
            {
                profiles["Default"] = new UserConfig() { CurrentProfileName = "Default" };
            }
        }

        public void SaveProfiles()
        {
            try
            {
                var json = JsonSerializer.Serialize(profiles, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(ProfilesPath, json);
            }
            catch (Exception ex)
            {
                Helpers.Logging.Log("Error saving profiles: " + ex.ToString());
            }
        }

        public IEnumerable<string> GetProfileNames()
        {
            return profiles.Keys;
        }

        public void SwitchProfile(string name)
        {
            if (profiles.ContainsKey(name))
            {
                App.CurrentConfig = profiles[name];
                App.CurrentConfig.CurrentProfileName = name;
            }
        }

        public void CreateProfile(string name)
        {
            if (!profiles.ContainsKey(name))
            {
                var newConfig = new UserConfig { CurrentProfileName = name };
                profiles[name] = newConfig;
            }
        }

        public void DeleteProfile(string name)
        {
            if (name == "Default") return; // can't delete default
            if (profiles.ContainsKey(name))
            {
                profiles.Remove(name);
            }
        }
    }
}


================================================================================
File: LuminaGuard\Models\SensorManager.cs
================================================================================

using System;

namespace LuminaGuard.Models
{
    public class SensorManager
    {
        // Placeholder. Future: integrate ambient light sensors or wearable sleep trackers via APIs.
        public double GetAmbientLightLevel()
        {
            return 0.5;
        }

        public double GetSleepQualityFromWearable()
        {
            return 0.8;
        }
    }
}


================================================================================
File: LuminaGuard\Models\SmartLightingController.cs
================================================================================

namespace LuminaGuard.Models
{
    public interface SmartLightingController
    {
        void Initialize();
        void SetColorTemperature(double kelvin);
    }
}


================================================================================
File: LuminaGuard\Models\UserConfig.cs
================================================================================

using System;
using System.Collections.Generic;
using LuminaGuard.Helpers;

namespace LuminaGuard.Models
{
    public class UserConfig
    {
        // Versioning for future migrations
        public int ConfigVersion { get; set; } = 1;

        public string CurrentProfileName { get; set; } = "Default";
        public double Intensity { get; set; } = 50.0;
        public double ColorTemperature { get; set; } = 1200.0;
        public byte Brightness { get; set; } = 100;
        public bool FilterEnabled { get; set; } = false;
        public string CustomColorHex { get; set; } = "";
        public bool SchedulerEnabled { get; set; } = false;
        public bool BrightnessOverTimeEnabled { get; set; } = false;
        public bool SmartLightingEnabled { get; set; } = false;
        public bool MLAdaptationEnabled { get; set; } = false;
        public string AccessibilityMode { get; set; } = "None";
        public List<ScheduleEntry> Schedules { get; set; } = new List<ScheduleEntry>();

        public TimeSpan DesiredBedtime { get; set; } = new TimeSpan(23, 0, 0);
        public TimeSpan DesiredWakeTime { get; set; } = new TimeSpan(7, 0, 0);
        public double SleepDurationGoal { get; set; } = 8.0; // hours
        public string Location { get; set; } = "Unknown";

        public bool FirstRunCompleted { get; set; } = false;
        public bool HideNightLightWarning { get; set; } = false;
    }
}


================================================================================
File: LuminaGuard\Plugins\IColorFilterPlugin.cs
================================================================================

using System.Windows.Media;

namespace LuminaGuard.Plugins
{
    public interface IColorFilterPlugin
    {
        string Name { get; }
        Color ApplyFilter(Color input);
    }
}


================================================================================
File: LuminaGuard\Plugins\IIntegrationPlugin.cs
================================================================================

namespace LuminaGuard.Plugins
{
    public interface IIntegrationPlugin
    {
        string Name { get; }
        void Initialize();
        void OnSettingsChanged();
    }
}


================================================================================
File: LuminaGuard\ViewModels\MainViewModel.cs
================================================================================

using System.ComponentModel;
using System.Runtime.CompilerServices;
using LuminaGuard.Models;

namespace LuminaGuard.ViewModels
{
    // Minimal example of a ViewModel for future MVVM:
    // Bind UI controls to properties here instead of code-behind.
    // Implement property change notifications and apply updates to App.CurrentConfig.
    // The actual binding in MainWindow.xaml would need adjustments (DataContext etc.).

    public class MainViewModel : INotifyPropertyChanged
    {
        private double intensity;
        private bool filterEnabled;

        public double Intensity
        {
            get => intensity;
            set
            {
                if (intensity != value)
                {
                    intensity = value;
                    OnPropertyChanged();
                }
            }
        }

        public bool FilterEnabled
        {
            get => filterEnabled;
            set
            {
                if (filterEnabled != value)
                {
                    filterEnabled = value;
                    OnPropertyChanged();
                }
            }
        }

        public MainViewModel()
        {
            // Initialize from App.CurrentConfig if needed
            if (App.CurrentConfig != null)
            {
                this.intensity = App.CurrentConfig.Intensity;
                this.filterEnabled = App.CurrentConfig.FilterEnabled;
            }
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


================================================================================
File: LuminaGuard\Views\OnboardingWizard.xaml
================================================================================

<Window x:Class="LuminaGuard.Views.OnboardingWizard"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Onboarding Wizard" Height="300" Width="400">
    <Grid Margin="10">
        <StackPanel>
            <TextBlock Text="Welcome to LuminaGuard" FontWeight="Bold" FontSize="16" Margin="0,0,0,10"/>
            <TextBlock Text="Set your desired wake and sleep times to optimize your lighting." Margin="0,0,0,10"/>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="Wake Time:" Margin="0,0,10,0"/>
                <TextBox x:Name="WakeTimeTextBox" Width="60" Text="07:00"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="Bed Time:" Margin="0,0,10,0"/>
                <TextBox x:Name="BedTimeTextBox" Width="60" Text="23:00"/>
            </StackPanel>
            <Button Content="Finish" Click="FinishButton_Click" HorizontalAlignment="Right"/>
        </StackPanel>
    </Grid>
</Window>


================================================================================
File: LuminaGuard\Views\OnboardingWizard.xaml.cs
================================================================================

using System;
using System.Windows;

namespace LuminaGuard.Views
{
    public partial class OnboardingWizard : Window
    {
        public OnboardingWizard()
        {
            InitializeComponent();
        }

        private void FinishButton_Click(object sender, RoutedEventArgs e)
        {
            if (TimeSpan.TryParse(WakeTimeTextBox.Text, out TimeSpan wake) &&
                TimeSpan.TryParse(BedTimeTextBox.Text, out TimeSpan bed))
            {
                App.CurrentConfig.DesiredWakeTime = wake;
                App.CurrentConfig.DesiredBedtime = bed;
            }

            App.CurrentConfig.FirstRunCompleted = true;
            // Save config now in case app crashes before main window:
            ((App)Application.Current).SaveConfiguration();

            MainWindow mainWindow = new MainWindow();
            mainWindow.Show();
            this.Close();
        }
    }
}


================================================================================
File: LuminaGuard\Views\TipsAndTricksWindow.xaml
================================================================================

<Window x:Class="LuminaGuard.Views.TipsAndTricksWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Tips and Tricks" Height="400" Width="400">
    <Grid Margin="10">
        <ScrollViewer>
            <StackPanel>
                <TextBlock Text="Tips and Tricks" FontWeight="Bold" FontSize="16" Margin="0,0,0,10"/>
                <TextBlock Text="1. Reduce blue light at least 2 hours before bedtime to improve sleep." Margin="0,0,0,10"/>
                <TextBlock Text="2. Adjust color temperature gradually for smoother transitions." Margin="0,0,0,10"/>
                <TextBlock Text="3. Experiment with wind-down and wake-up modes to align with your circadian rhythm." Margin="0,0,0,10"/>
                <TextBlock Text="4. Use ML adaptation to let the software learn your preferences over time." Margin="0,0,0,10"/>
                <TextBlock Text="5. Explore different accessibility filters if you have specific vision needs." Margin="0,0,0,10"/>
                <TextBlock Text="6. Create multiple profiles for different environments (e.g., work, gaming, reading)." Margin="0,0,0,10"/>
                <TextBlock Text="7. Integrate with your smart home devices for a seamless lighting experience." Margin="0,0,0,10"/>
                <TextBlock Text="8. Regularly sync to the cloud if you use multiple devices." Margin="0,0,0,10"/>
                <TextBlock Text="9. Future: Install plugin-based filters or integration modules from marketplace." Margin="0,0,0,10"/>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Window>


================================================================================
File: LuminaGuard\Views\TipsAndTricksWindow.xaml.cs
================================================================================

using System.Windows;

namespace LuminaGuard.Views
{
    public partial class TipsAndTricksWindow : Window
    {
        public TipsAndTricksWindow()
        {
            InitializeComponent();
        }
    }
}


================================================================================
File: decompile_code.py
================================================================================

import os
import re

# Path to the large text file produced by the compilation (this is a placeholder).
# When you run this, set INPUT_FILE to the actual input filename.
INPUT_FILE = "LuminaGuard_Code_Compilation.txt"

# Directory where you want to recreate the files
OUTPUT_ROOT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "LuminaGuard")

# Regular expressions to identify file boundaries
FILE_HEADER_PATTERN = re.compile(r"^=+\r?\nFile:\s*(.+)\r?\n=+", re.MULTILINE)

def decompile_code(input_file, output_dir):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Read the entire compiled file
    with open(input_file, 'r', encoding='utf-8') as infile:
        content = infile.read()
    
    # Find all file headers and their indices
    files = FILE_HEADER_PATTERN.findall(content)

    # Split on file boundaries
    blocks = re.split(FILE_HEADER_PATTERN, content)

    initial_text = blocks[0].strip()
    if initial_text:
        # Save initial text to changelog.txt
        changelog_path = os.path.join(output_dir, "changelog.txt")
        with open(changelog_path, 'w', encoding='utf-8') as cfile:
            cfile.write(initial_text + "\n")

    # Now process each pair of (filename, content)
    for i in range(1, len(blocks), 2):
        fname = blocks[i].strip()
        if i+1 >= len(blocks):
            # No content block found - malformed input?
            break
        fcontent = blocks[i+1].strip()

        # Normalize the path to prevent creating nested directories named "LuminaGuard".
        # If the file path starts with "LuminaGuard/", remove that part.
        fname = re.sub(r"^LuminaGuard[\\/]", "", fname, flags=re.IGNORECASE)

        file_path = os.path.join(output_dir, fname)
        file_dir = os.path.dirname(file_path)
        if not os.path.exists(file_dir):
            os.makedirs(file_dir)

        with open(file_path, 'w', encoding='utf-8') as outfile:
            outfile.write(fcontent + "\n")

    print(f"Decompilation complete. Files recreated in: {output_dir}")

if __name__ == "__main__":
    decompile_code(INPUT_FILE, OUTPUT_ROOT_DIR)
